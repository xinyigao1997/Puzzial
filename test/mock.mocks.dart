// Mocks generated by Mockito 5.4.0 from annotations
// in puzzial/test/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:convert' as _i13;
import 'dart:io' as _i2;
import 'dart:math' as _i7;
import 'dart:typed_data' as _i14;
import 'dart:ui' as _i3;

import 'package:firebase_core/firebase_core.dart' as _i8;
import 'package:firebase_database/firebase_database.dart' as _i9;
import 'package:firebase_storage/firebase_storage.dart' as _i10;
import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/material.dart' as _i6;
import 'package:flutter/services.dart' as _i16;
import 'package:flutter/src/painting/image_cache.dart' as _i15;
import 'package:flutter/src/painting/image_stream.dart' as _i4;
import 'package:image_cropper/src/cropper.dart' as _i21;
import 'package:image_cropper_platform_interface/image_cropper_platform_interface.dart'
    as _i22;
import 'package:image_picker/image_picker.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler_platform_interface/permission_handler_platform_interface.dart'
    as _i23;
import 'package:puzzial/models/player.dart' as _i20;
import 'package:puzzial/state/game_state.dart' as _i17;
import 'package:puzzial/widgets/puzzle_piece_widget.dart' as _i18;
import 'package:tuple/tuple.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFile_0 extends _i1.SmartFake implements _i2.File {
  _FakeFile_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_1 extends _i1.SmartFake implements Uri {
  _FakeUri_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_2 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_3 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandomAccessFile_4 extends _i1.SmartFake
    implements _i2.RandomAccessFile {
  _FakeRandomAccessFile_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_5 extends _i1.SmartFake implements _i2.IOSink {
  _FakeIOSink_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_6 extends _i1.SmartFake implements _i2.FileStat {
  _FakeFileStat_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_7 extends _i1.SmartFake
    implements _i2.FileSystemEntity {
  _FakeFileSystemEntity_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImage_8 extends _i1.SmartFake implements _i3.Image {
  _FakeImage_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageStreamCompleter_9 extends _i1.SmartFake
    implements _i4.ImageStreamCompleter {
  _FakeImageStreamCompleter_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeImageStream_10 extends _i1.SmartFake implements _i4.ImageStream {
  _FakeImageStream_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeNetworkImage_11 extends _i1.SmartFake implements _i6.NetworkImage {
  _FakeNetworkImage_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandom_12 extends _i1.SmartFake implements _i7.Random {
  _FakeRandom_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseOptions_13 extends _i1.SmartFake
    implements _i8.FirebaseOptions {
  _FakeFirebaseOptions_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseReference_14 extends _i1.SmartFake
    implements _i9.DatabaseReference {
  _FakeDatabaseReference_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionResult_15 extends _i1.SmartFake
    implements _i9.TransactionResult {
  _FakeTransactionResult_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOnDisconnect_16 extends _i1.SmartFake implements _i9.OnDisconnect {
  _FakeOnDisconnect_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataSnapshot_17 extends _i1.SmartFake implements _i9.DataSnapshot {
  _FakeDataSnapshot_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseEvent_18 extends _i1.SmartFake implements _i9.DatabaseEvent {
  _FakeDatabaseEvent_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_19 extends _i1.SmartFake implements _i9.Query {
  _FakeQuery_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_20 extends _i1.SmartFake implements _i8.FirebaseApp {
  _FakeFirebaseApp_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_21 extends _i1.SmartFake implements Duration {
  _FakeDuration_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReference_22 extends _i1.SmartFake implements _i10.Reference {
  _FakeReference_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseStorage_23 extends _i1.SmartFake
    implements _i10.FirebaseStorage {
  _FakeFirebaseStorage_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFullMetadata_24 extends _i1.SmartFake implements _i10.FullMetadata {
  _FakeFullMetadata_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListResult_25 extends _i1.SmartFake implements _i10.ListResult {
  _FakeListResult_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUploadTask_26 extends _i1.SmartFake implements _i10.UploadTask {
  _FakeUploadTask_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDownloadTask_27 extends _i1.SmartFake implements _i10.DownloadTask {
  _FakeDownloadTask_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostData_28 extends _i1.SmartFake implements _i11.LostData {
  _FakeLostData_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostDataResponse_29 extends _i1.SmartFake
    implements _i11.LostDataResponse {
  _FakeLostDataResponse_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i2.File {
  @override
  _i2.File get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFile_0(
          this,
          Invocation.getter(#absolute),
        ),
        returnValueForMissingStub: _FakeFile_0(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i2.File);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_1(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_1(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);
  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeDirectory_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i2.Directory);
  @override
  _i12.Future<_i2.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValue: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
        returnValueForMissingStub: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
      ) as _i12.Future<_i2.File>);
  @override
  void createSync({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<_i2.File> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
        returnValueForMissingStub: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i12.Future<_i2.File>);
  @override
  _i2.File renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFile_0(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeFile_0(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i2.File);
  @override
  _i12.Future<_i2.File> copy(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [newPath],
        ),
        returnValue: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
        returnValueForMissingStub: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
      ) as _i12.Future<_i2.File>);
  @override
  _i2.File copySync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copySync,
          [newPath],
        ),
        returnValue: _FakeFile_0(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeFile_0(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
      ) as _i2.File);
  @override
  _i12.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i12.Future<int>.value(0),
        returnValueForMissingStub: _i12.Future<int>.value(0),
      ) as _i12.Future<int>);
  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i12.Future<DateTime> lastAccessed() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessed,
          [],
        ),
        returnValue: _i12.Future<DateTime>.value(_FakeDateTime_3(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
        returnValueForMissingStub: _i12.Future<DateTime>.value(_FakeDateTime_3(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
      ) as _i12.Future<DateTime>);
  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessedSync,
          [],
        ),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_3(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
      ) as DateTime);
  @override
  _i12.Future<dynamic> setLastAccessed(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastAccessed,
          [time],
        ),
        returnValue: _i12.Future<dynamic>.value(),
        returnValueForMissingStub: _i12.Future<dynamic>.value(),
      ) as _i12.Future<dynamic>);
  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastAccessedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i12.Future<DateTime>.value(_FakeDateTime_3(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
        returnValueForMissingStub: _i12.Future<DateTime>.value(_FakeDateTime_3(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i12.Future<DateTime>);
  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastModifiedSync,
          [],
        ),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_3(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
      ) as DateTime);
  @override
  _i12.Future<dynamic> setLastModified(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastModified,
          [time],
        ),
        returnValue: _i12.Future<dynamic>.value(),
        returnValueForMissingStub: _i12.Future<dynamic>.value(),
      ) as _i12.Future<dynamic>);
  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastModifiedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<_i2.RandomAccessFile> open(
          {_i2.FileMode? mode = _i2.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {#mode: mode},
        ),
        returnValue:
            _i12.Future<_i2.RandomAccessFile>.value(_FakeRandomAccessFile_4(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i2.RandomAccessFile>.value(_FakeRandomAccessFile_4(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i12.Future<_i2.RandomAccessFile>);
  @override
  _i2.RandomAccessFile openSync({_i2.FileMode? mode = _i2.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openSync,
          [],
          {#mode: mode},
        ),
        returnValue: _FakeRandomAccessFile_4(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
        returnValueForMissingStub: _FakeRandomAccessFile_4(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
      ) as _i2.RandomAccessFile);
  @override
  _i12.Stream<List<int>> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i12.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i12.Stream<List<int>>.empty(),
      ) as _i12.Stream<List<int>>);
  @override
  _i2.IOSink openWrite({
    _i2.FileMode? mode = _i2.FileMode.write,
    _i13.Encoding? encoding = const _i13.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openWrite,
          [],
          {
            #mode: mode,
            #encoding: encoding,
          },
        ),
        returnValue: _FakeIOSink_5(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
        returnValueForMissingStub: _FakeIOSink_5(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
      ) as _i2.IOSink);
  @override
  _i12.Future<_i14.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i12.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
        returnValueForMissingStub:
            _i12.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
      ) as _i12.Future<_i14.Uint8List>);
  @override
  _i14.Uint8List readAsBytesSync() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytesSync,
          [],
        ),
        returnValue: _i14.Uint8List(0),
        returnValueForMissingStub: _i14.Uint8List(0),
      ) as _i14.Uint8List);
  @override
  _i12.Future<String> readAsString(
          {_i13.Encoding? encoding = const _i13.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i12.Future<String>.value(''),
        returnValueForMissingStub: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  String readAsStringSync({_i13.Encoding? encoding = const _i13.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsStringSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i12.Future<List<String>> readAsLines(
          {_i13.Encoding? encoding = const _i13.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLines,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i12.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i12.Future<List<String>>.value(<String>[]),
      ) as _i12.Future<List<String>>);
  @override
  List<String> readAsLinesSync(
          {_i13.Encoding? encoding = const _i13.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLinesSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  _i12.Future<_i2.File> writeAsBytes(
    List<int>? bytes, {
    _i2.FileMode? mode = _i2.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValue: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
        returnValueForMissingStub: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
      ) as _i12.Future<_i2.File>);
  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i2.FileMode? mode = _i2.FileMode.write,
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsBytesSync,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<_i2.File> writeAsString(
    String? contents, {
    _i2.FileMode? mode = _i2.FileMode.write,
    _i13.Encoding? encoding = const _i13.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValue: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
        returnValueForMissingStub: _i12.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
      ) as _i12.Future<_i2.File>);
  @override
  void writeAsStringSync(
    String? contents, {
    _i2.FileMode? mode = _i2.FileMode.write,
    _i13.Encoding? encoding = const _i13.Utf8Codec(),
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsStringSync,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
        returnValueForMissingStub: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i12.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i12.Future<String>.value(''),
        returnValueForMissingStub: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i12.Future<_i2.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i12.Future<_i2.FileStat>.value(_FakeFileStat_6(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i2.FileStat>.value(_FakeFileStat_6(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i12.Future<_i2.FileStat>);
  @override
  _i2.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_6(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeFileStat_6(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i2.FileStat);
  @override
  _i12.Future<_i2.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i12.Future<_i2.FileSystemEntity>.value(_FakeFileSystemEntity_7(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i2.FileSystemEntity>.value(_FakeFileSystemEntity_7(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i12.Future<_i2.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Stream<_i2.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i12.Stream<_i2.FileSystemEvent>.empty(),
        returnValueForMissingStub: _i12.Stream<_i2.FileSystemEvent>.empty(),
      ) as _i12.Stream<_i2.FileSystemEvent>);
}

/// A class which mocks [Image].
///
/// See the documentation for Mockito's code generation for more information.
class MockImage extends _i1.Mock implements _i3.Image {
  @override
  int get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get debugDisposed => (super.noSuchMethod(
        Invocation.getter(#debugDisposed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<_i14.ByteData?> toByteData(
          {_i3.ImageByteFormat? format = _i3.ImageByteFormat.rawRgba}) =>
      (super.noSuchMethod(
        Invocation.method(
          #toByteData,
          [],
          {#format: format},
        ),
        returnValue: _i12.Future<_i14.ByteData?>.value(),
        returnValueForMissingStub: _i12.Future<_i14.ByteData?>.value(),
      ) as _i12.Future<_i14.ByteData?>);
  @override
  _i3.Image clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _FakeImage_8(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeImage_8(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
      ) as _i3.Image);
  @override
  bool isCloneOf(_i3.Image? other) => (super.noSuchMethod(
        Invocation.method(
          #isCloneOf,
          [other],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [NetworkImage].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkImage extends _i1.Mock implements _i6.NetworkImage {
  @override
  String get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  double get scale => (super.noSuchMethod(
        Invocation.getter(#scale),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  _i4.ImageStreamCompleter load(
    _i6.NetworkImage? key,
    _i6.DecoderCallback? decode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #load,
          [
            key,
            decode,
          ],
        ),
        returnValue: _FakeImageStreamCompleter_9(
          this,
          Invocation.method(
            #load,
            [
              key,
              decode,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeImageStreamCompleter_9(
          this,
          Invocation.method(
            #load,
            [
              key,
              decode,
            ],
          ),
        ),
      ) as _i4.ImageStreamCompleter);
  @override
  _i4.ImageStreamCompleter loadBuffer(
    _i6.NetworkImage? key,
    _i6.DecoderBufferCallback? decode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadBuffer,
          [
            key,
            decode,
          ],
        ),
        returnValue: _FakeImageStreamCompleter_9(
          this,
          Invocation.method(
            #loadBuffer,
            [
              key,
              decode,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeImageStreamCompleter_9(
          this,
          Invocation.method(
            #loadBuffer,
            [
              key,
              decode,
            ],
          ),
        ),
      ) as _i4.ImageStreamCompleter);
  @override
  _i4.ImageStream resolve(_i6.ImageConfiguration? configuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolve,
          [configuration],
        ),
        returnValue: _FakeImageStream_10(
          this,
          Invocation.method(
            #resolve,
            [configuration],
          ),
        ),
        returnValueForMissingStub: _FakeImageStream_10(
          this,
          Invocation.method(
            #resolve,
            [configuration],
          ),
        ),
      ) as _i4.ImageStream);
  @override
  _i4.ImageStream createStream(_i6.ImageConfiguration? configuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #createStream,
          [configuration],
        ),
        returnValue: _FakeImageStream_10(
          this,
          Invocation.method(
            #createStream,
            [configuration],
          ),
        ),
        returnValueForMissingStub: _FakeImageStream_10(
          this,
          Invocation.method(
            #createStream,
            [configuration],
          ),
        ),
      ) as _i4.ImageStream);
  @override
  _i12.Future<_i15.ImageCacheStatus?> obtainCacheStatus({
    required _i6.ImageConfiguration? configuration,
    _i4.ImageErrorListener? handleError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtainCacheStatus,
          [],
          {
            #configuration: configuration,
            #handleError: handleError,
          },
        ),
        returnValue: _i12.Future<_i15.ImageCacheStatus?>.value(),
        returnValueForMissingStub: _i12.Future<_i15.ImageCacheStatus?>.value(),
      ) as _i12.Future<_i15.ImageCacheStatus?>);
  @override
  void resolveStreamForKey(
    _i6.ImageConfiguration? configuration,
    _i4.ImageStream? stream,
    _i6.NetworkImage? key,
    _i4.ImageErrorListener? handleError,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #resolveStreamForKey,
          [
            configuration,
            stream,
            key,
            handleError,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<bool> evict({
    _i15.ImageCache? cache,
    _i6.ImageConfiguration? configuration = _i6.ImageConfiguration.empty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #evict,
          [],
          {
            #cache: cache,
            #configuration: configuration,
          },
        ),
        returnValue: _i12.Future<bool>.value(false),
        returnValueForMissingStub: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);
  @override
  _i12.Future<_i6.NetworkImage> obtainKey(
          _i6.ImageConfiguration? configuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtainKey,
          [configuration],
        ),
        returnValue: _i12.Future<_i6.NetworkImage>.value(_FakeNetworkImage_11(
          this,
          Invocation.method(
            #obtainKey,
            [configuration],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i6.NetworkImage>.value(_FakeNetworkImage_11(
          this,
          Invocation.method(
            #obtainKey,
            [configuration],
          ),
        )),
      ) as _i12.Future<_i6.NetworkImage>);
}

/// A class which mocks [Clipboard].
///
/// See the documentation for Mockito's code generation for more information.
class MockClipboard extends _i1.Mock implements _i16.Clipboard {}

/// A class which mocks [GameState].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameState extends _i1.Mock implements _i17.GameState {
  @override
  set database(_i9.DatabaseReference? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set storage(_i10.FirebaseStorage? _storage) => super.noSuchMethod(
        Invocation.setter(
          #storage,
          _storage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set app(_i8.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get loggedIn => (super.noSuchMethod(
        Invocation.getter(#loggedIn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set loggedIn(bool? _loggedIn) => super.noSuchMethod(
        Invocation.setter(
          #loggedIn,
          _loggedIn,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isSinglePlayer => (super.noSuchMethod(
        Invocation.getter(#isSinglePlayer),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set isSinglePlayer(bool? _isSinglePlayer) => super.noSuchMethod(
        Invocation.setter(
          #isSinglePlayer,
          _isSinglePlayer,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set sessionId(String? _sessionId) => super.noSuchMethod(
        Invocation.setter(
          #sessionId,
          _sessionId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Set<String> get sessionUserIds => (super.noSuchMethod(
        Invocation.getter(#sessionUserIds),
        returnValue: <String>{},
        returnValueForMissingStub: <String>{},
      ) as Set<String>);
  @override
  set sessionUserIds(Set<String>? _sessionUserIds) => super.noSuchMethod(
        Invocation.setter(
          #sessionUserIds,
          _sessionUserIds,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get pieceHeight => (super.noSuchMethod(
        Invocation.getter(#pieceHeight),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set pieceHeight(int? _pieceHeight) => super.noSuchMethod(
        Invocation.setter(
          #pieceHeight,
          _pieceHeight,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get pieceWidth => (super.noSuchMethod(
        Invocation.getter(#pieceWidth),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set pieceWidth(int? _pieceWidth) => super.noSuchMethod(
        Invocation.setter(
          #pieceWidth,
          _pieceWidth,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get rows => (super.noSuchMethod(
        Invocation.getter(#rows),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set rows(int? _rows) => super.noSuchMethod(
        Invocation.setter(
          #rows,
          _rows,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get cols => (super.noSuchMethod(
        Invocation.getter(#cols),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set cols(int? _cols) => super.noSuchMethod(
        Invocation.setter(
          #cols,
          _cols,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get components => (super.noSuchMethod(
        Invocation.getter(#components),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set components(int? _components) => super.noSuchMethod(
        Invocation.setter(
          #components,
          _components,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get puzzleLeft => (super.noSuchMethod(
        Invocation.getter(#puzzleLeft),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set puzzleLeft(double? _puzzleLeft) => super.noSuchMethod(
        Invocation.setter(
          #puzzleLeft,
          _puzzleLeft,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get puzzleTop => (super.noSuchMethod(
        Invocation.getter(#puzzleTop),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set puzzleTop(double? _puzzleTop) => super.noSuchMethod(
        Invocation.setter(
          #puzzleTop,
          _puzzleTop,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get puzzleHeight => (super.noSuchMethod(
        Invocation.getter(#puzzleHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set puzzleHeight(double? _puzzleHeight) => super.noSuchMethod(
        Invocation.setter(
          #puzzleHeight,
          _puzzleHeight,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get puzzleWidth => (super.noSuchMethod(
        Invocation.getter(#puzzleWidth),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set puzzleWidth(double? _puzzleWidth) => super.noSuchMethod(
        Invocation.setter(
          #puzzleWidth,
          _puzzleWidth,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get puzzleLeftBound => (super.noSuchMethod(
        Invocation.getter(#puzzleLeftBound),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set puzzleLeftBound(double? _puzzleLeftBound) => super.noSuchMethod(
        Invocation.setter(
          #puzzleLeftBound,
          _puzzleLeftBound,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get puzzleTopBound => (super.noSuchMethod(
        Invocation.getter(#puzzleTopBound),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set puzzleTopBound(double? _puzzleTopBound) => super.noSuchMethod(
        Invocation.setter(
          #puzzleTopBound,
          _puzzleTopBound,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get puzzleRightBound => (super.noSuchMethod(
        Invocation.getter(#puzzleRightBound),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set puzzleRightBound(double? _puzzleRightBound) => super.noSuchMethod(
        Invocation.setter(
          #puzzleRightBound,
          _puzzleRightBound,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get puzzleBottomBound => (super.noSuchMethod(
        Invocation.getter(#puzzleBottomBound),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set puzzleBottomBound(double? _puzzleBottomBound) => super.noSuchMethod(
        Invocation.setter(
          #puzzleBottomBound,
          _puzzleBottomBound,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get downloadUrl => (super.noSuchMethod(
        Invocation.getter(#downloadUrl),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set downloadUrl(String? _downloadUrl) => super.noSuchMethod(
        Invocation.setter(
          #downloadUrl,
          _downloadUrl,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get screenWidth => (super.noSuchMethod(
        Invocation.getter(#screenWidth),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set screenWidth(double? _screenWidth) => super.noSuchMethod(
        Invocation.setter(
          #screenWidth,
          _screenWidth,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get screenHeight => (super.noSuchMethod(
        Invocation.getter(#screenHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set screenHeight(double? _screenHeight) => super.noSuchMethod(
        Invocation.setter(
          #screenHeight,
          _screenHeight,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get currentLevel => (super.noSuchMethod(
        Invocation.getter(#currentLevel),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set currentLevel(int? _currentLevel) => super.noSuchMethod(
        Invocation.setter(
          #currentLevel,
          _currentLevel,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isGameOver => (super.noSuchMethod(
        Invocation.getter(#isGameOver),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set isGameOver(bool? _isGameOver) => super.noSuchMethod(
        Invocation.setter(
          #isGameOver,
          _isGameOver,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set puzzleImage(_i11.XFile? _puzzleImage) => super.noSuchMethod(
        Invocation.setter(
          #puzzleImage,
          _puzzleImage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Uint8List get hintImageBytes => (super.noSuchMethod(
        Invocation.getter(#hintImageBytes),
        returnValue: _i14.Uint8List(0),
        returnValueForMissingStub: _i14.Uint8List(0),
      ) as _i14.Uint8List);
  @override
  set hintImageBytes(_i14.Uint8List? _hintImageBytes) => super.noSuchMethod(
        Invocation.setter(
          #hintImageBytes,
          _hintImageBytes,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i18.PuzzlePiece> get pieces => (super.noSuchMethod(
        Invocation.getter(#pieces),
        returnValue: <_i18.PuzzlePiece>[],
        returnValueForMissingStub: <_i18.PuzzlePiece>[],
      ) as List<_i18.PuzzlePiece>);
  @override
  set pieces(List<_i18.PuzzlePiece>? _pieces) => super.noSuchMethod(
        Invocation.setter(
          #pieces,
          _pieces,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i19.Tuple2<dynamic, dynamic>> get gridPositions => (super.noSuchMethod(
        Invocation.getter(#gridPositions),
        returnValue: <_i19.Tuple2<dynamic, dynamic>>[],
        returnValueForMissingStub: <_i19.Tuple2<dynamic, dynamic>>[],
      ) as List<_i19.Tuple2<dynamic, dynamic>>);
  @override
  set gridPositions(List<_i19.Tuple2<dynamic, dynamic>>? _gridPositions) =>
      super.noSuchMethod(
        Invocation.setter(
          #gridPositions,
          _gridPositions,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i20.Player> get players => (super.noSuchMethod(
        Invocation.getter(#players),
        returnValue: <_i20.Player>[],
        returnValueForMissingStub: <_i20.Player>[],
      ) as List<_i20.Player>);
  @override
  set players(List<_i20.Player>? _players) => super.noSuchMethod(
        Invocation.setter(
          #players,
          _players,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Random get random => (super.noSuchMethod(
        Invocation.getter(#random),
        returnValue: _FakeRandom_12(
          this,
          Invocation.getter(#random),
        ),
        returnValueForMissingStub: _FakeRandom_12(
          this,
          Invocation.getter(#random),
        ),
      ) as _i7.Random);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  double randomInRange(
    double? min,
    double? max,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #randomInRange,
          [
            min,
            max,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  void setGameOver(bool? isOver) => super.noSuchMethod(
        Invocation.method(
          #setGameOver,
          [isOver],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<void> resetPuzzle() => (super.noSuchMethod(
        Invocation.method(
          #resetPuzzle,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  void setPuzzleBounds() => super.noSuchMethod(
        Invocation.method(
          #setPuzzleBounds,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void randomizePiecePositions() => super.noSuchMethod(
        Invocation.method(
          #randomizePiecePositions,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<void> updateDatabase() => (super.noSuchMethod(
        Invocation.method(
          #updateDatabase,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<Map<String, dynamic>> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue:
            _i12.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i12.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i12.Future<Map<String, dynamic>>);
  @override
  _i12.Future<void> saveState(String? session) => (super.noSuchMethod(
        Invocation.method(
          #saveState,
          [session],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<_i3.Image> xFileToUiImage(_i11.XFile? file) =>
      (super.noSuchMethod(
        Invocation.method(
          #xFileToUiImage,
          [file],
        ),
        returnValue: _i12.Future<_i3.Image>.value(_FakeImage_8(
          this,
          Invocation.method(
            #xFileToUiImage,
            [file],
          ),
        )),
        returnValueForMissingStub: _i12.Future<_i3.Image>.value(_FakeImage_8(
          this,
          Invocation.method(
            #xFileToUiImage,
            [file],
          ),
        )),
      ) as _i12.Future<_i3.Image>);
  @override
  _i12.Future<_i3.Image> uintBytesToImage(_i14.Uint8List? bytes) =>
      (super.noSuchMethod(
        Invocation.method(
          #uintBytesToImage,
          [bytes],
        ),
        returnValue: _i12.Future<_i3.Image>.value(_FakeImage_8(
          this,
          Invocation.method(
            #uintBytesToImage,
            [bytes],
          ),
        )),
        returnValueForMissingStub: _i12.Future<_i3.Image>.value(_FakeImage_8(
          this,
          Invocation.method(
            #uintBytesToImage,
            [bytes],
          ),
        )),
      ) as _i12.Future<_i3.Image>);
  @override
  _i12.Future<_i3.Image> bytesToUiImage(_i14.Uint8List? bytes) =>
      (super.noSuchMethod(
        Invocation.method(
          #bytesToUiImage,
          [bytes],
        ),
        returnValue: _i12.Future<_i3.Image>.value(_FakeImage_8(
          this,
          Invocation.method(
            #bytesToUiImage,
            [bytes],
          ),
        )),
        returnValueForMissingStub: _i12.Future<_i3.Image>.value(_FakeImage_8(
          this,
          Invocation.method(
            #bytesToUiImage,
            [bytes],
          ),
        )),
      ) as _i12.Future<_i3.Image>);
  @override
  _i12.Future<void> saveImageToStorage() => (super.noSuchMethod(
        Invocation.method(
          #saveImageToStorage,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<_i14.Uint8List> downloadImageFromStorage(String? downloadUrl) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadImageFromStorage,
          [downloadUrl],
        ),
        returnValue: _i12.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
        returnValueForMissingStub:
            _i12.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
      ) as _i12.Future<_i14.Uint8List>);
  @override
  _i12.Future<List<_i18.PuzzlePiece>> generatePuzzle({
    List<Map<String, dynamic>>? piecesInfo,
    _i14.Uint8List? imageBytes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generatePuzzle,
          [],
          {
            #piecesInfo: piecesInfo,
            #imageBytes: imageBytes,
          },
        ),
        returnValue:
            _i12.Future<List<_i18.PuzzlePiece>>.value(<_i18.PuzzlePiece>[]),
        returnValueForMissingStub:
            _i12.Future<List<_i18.PuzzlePiece>>.value(<_i18.PuzzlePiece>[]),
      ) as _i12.Future<List<_i18.PuzzlePiece>>);
  @override
  _i12.Future<bool> validateSession(String? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #validateSession,
          [sessionId],
        ),
        returnValue: _i12.Future<bool>.value(false),
        returnValueForMissingStub: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);
  @override
  _i12.Future<void> reloadSession(
    String? sessionId,
    String? imageLink,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reloadSession,
          [
            sessionId,
            imageLink,
          ],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> notifyGameChange({
    int? pieceId,
    double? left,
    double? top,
    int? components,
    int? numOfPlayer,
    bool? isAssembled,
    bool? isOccupied,
    bool? isGameOver,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #notifyGameChange,
          [],
          {
            #pieceId: pieceId,
            #left: left,
            #top: top,
            #components: components,
            #numOfPlayer: numOfPlayer,
            #isAssembled: isAssembled,
            #isOccupied: isOccupied,
            #isGameOver: isGameOver,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FirebaseApp].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseApp extends _i1.Mock implements _i8.FirebaseApp {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i8.FirebaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeFirebaseOptions_13(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeFirebaseOptions_13(
          this,
          Invocation.getter(#options),
        ),
      ) as _i8.FirebaseOptions);
  @override
  bool get isAutomaticDataCollectionEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutomaticDataCollectionEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i12.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> setAutomaticDataCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAutomaticDataCollectionEnabled,
          [enabled],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> setAutomaticResourceManagementEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAutomaticResourceManagementEnabled,
          [enabled],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [DatabaseReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseReference extends _i1.Mock implements _i9.DatabaseReference {
  @override
  _i9.DatabaseReference get root => (super.noSuchMethod(
        Invocation.getter(#root),
        returnValue: _FakeDatabaseReference_14(
          this,
          Invocation.getter(#root),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_14(
          this,
          Invocation.getter(#root),
        ),
      ) as _i9.DatabaseReference);
  @override
  _i9.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_14(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_14(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i9.DatabaseReference);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i12.Stream<_i9.DatabaseEvent> get onChildAdded => (super.noSuchMethod(
        Invocation.getter(#onChildAdded),
        returnValue: _i12.Stream<_i9.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i12.Stream<_i9.DatabaseEvent>.empty(),
      ) as _i12.Stream<_i9.DatabaseEvent>);
  @override
  _i12.Stream<_i9.DatabaseEvent> get onChildRemoved => (super.noSuchMethod(
        Invocation.getter(#onChildRemoved),
        returnValue: _i12.Stream<_i9.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i12.Stream<_i9.DatabaseEvent>.empty(),
      ) as _i12.Stream<_i9.DatabaseEvent>);
  @override
  _i12.Stream<_i9.DatabaseEvent> get onChildChanged => (super.noSuchMethod(
        Invocation.getter(#onChildChanged),
        returnValue: _i12.Stream<_i9.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i12.Stream<_i9.DatabaseEvent>.empty(),
      ) as _i12.Stream<_i9.DatabaseEvent>);
  @override
  _i12.Stream<_i9.DatabaseEvent> get onChildMoved => (super.noSuchMethod(
        Invocation.getter(#onChildMoved),
        returnValue: _i12.Stream<_i9.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i12.Stream<_i9.DatabaseEvent>.empty(),
      ) as _i12.Stream<_i9.DatabaseEvent>);
  @override
  _i12.Stream<_i9.DatabaseEvent> get onValue => (super.noSuchMethod(
        Invocation.getter(#onValue),
        returnValue: _i12.Stream<_i9.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i12.Stream<_i9.DatabaseEvent>.empty(),
      ) as _i12.Stream<_i9.DatabaseEvent>);
  @override
  _i9.DatabaseReference child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeDatabaseReference_14(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_14(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i9.DatabaseReference);
  @override
  _i9.DatabaseReference push() => (super.noSuchMethod(
        Invocation.method(
          #push,
          [],
        ),
        returnValue: _FakeDatabaseReference_14(
          this,
          Invocation.method(
            #push,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_14(
          this,
          Invocation.method(
            #push,
            [],
          ),
        ),
      ) as _i9.DatabaseReference);
  @override
  _i12.Future<void> set(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #set,
          [value],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> setWithPriority(
    Object? value,
    Object? priority,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWithPriority,
          [
            value,
            priority,
          ],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> update(Map<String, Object?>? value) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [value],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> setPriority(Object? priority) => (super.noSuchMethod(
        Invocation.method(
          #setPriority,
          [priority],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> remove() => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<_i9.TransactionResult> runTransaction(
    _i9.TransactionHandler? transactionHandler, {
    bool? applyLocally = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {#applyLocally: applyLocally},
        ),
        returnValue:
            _i12.Future<_i9.TransactionResult>.value(_FakeTransactionResult_15(
          this,
          Invocation.method(
            #runTransaction,
            [transactionHandler],
            {#applyLocally: applyLocally},
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i9.TransactionResult>.value(_FakeTransactionResult_15(
          this,
          Invocation.method(
            #runTransaction,
            [transactionHandler],
            {#applyLocally: applyLocally},
          ),
        )),
      ) as _i12.Future<_i9.TransactionResult>);
  @override
  _i9.OnDisconnect onDisconnect() => (super.noSuchMethod(
        Invocation.method(
          #onDisconnect,
          [],
        ),
        returnValue: _FakeOnDisconnect_16(
          this,
          Invocation.method(
            #onDisconnect,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeOnDisconnect_16(
          this,
          Invocation.method(
            #onDisconnect,
            [],
          ),
        ),
      ) as _i9.OnDisconnect);
  @override
  _i12.Future<_i9.DataSnapshot> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i12.Future<_i9.DataSnapshot>.value(_FakeDataSnapshot_17(
          this,
          Invocation.method(
            #get,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i9.DataSnapshot>.value(_FakeDataSnapshot_17(
          this,
          Invocation.method(
            #get,
            [],
          ),
        )),
      ) as _i12.Future<_i9.DataSnapshot>);
  @override
  _i12.Future<_i9.DatabaseEvent> once(
          [_i9.DatabaseEventType? eventType = _i9.DatabaseEventType.value]) =>
      (super.noSuchMethod(
        Invocation.method(
          #once,
          [eventType],
        ),
        returnValue: _i12.Future<_i9.DatabaseEvent>.value(_FakeDatabaseEvent_18(
          this,
          Invocation.method(
            #once,
            [eventType],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i9.DatabaseEvent>.value(_FakeDatabaseEvent_18(
          this,
          Invocation.method(
            #once,
            [eventType],
          ),
        )),
      ) as _i12.Future<_i9.DatabaseEvent>);
  @override
  _i9.Query startAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #startAt,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #startAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query startAfter(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #startAfter,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #startAfter,
            [value],
            {#key: key},
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query endAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #endAt,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #endAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query endBefore(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #endBefore,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #endBefore,
            [value],
            {#key: key},
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query equalTo(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #equalTo,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #equalTo,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #equalTo,
            [value],
            {#key: key},
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query limitToFirst(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToFirst,
          [limit],
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #limitToFirst,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #limitToFirst,
            [limit],
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query orderByChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #orderByChild,
          [path],
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #orderByChild,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #orderByChild,
            [path],
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query orderByKey() => (super.noSuchMethod(
        Invocation.method(
          #orderByKey,
          [],
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #orderByKey,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #orderByKey,
            [],
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query orderByValue() => (super.noSuchMethod(
        Invocation.method(
          #orderByValue,
          [],
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #orderByValue,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #orderByValue,
            [],
          ),
        ),
      ) as _i9.Query);
  @override
  _i9.Query orderByPriority() => (super.noSuchMethod(
        Invocation.method(
          #orderByPriority,
          [],
        ),
        returnValue: _FakeQuery_19(
          this,
          Invocation.method(
            #orderByPriority,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_19(
          this,
          Invocation.method(
            #orderByPriority,
            [],
          ),
        ),
      ) as _i9.Query);
  @override
  _i12.Future<void> keepSynced(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #keepSynced,
          [value],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [DataSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSnapshot extends _i1.Mock implements _i9.DataSnapshot {
  @override
  _i9.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_14(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_14(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i9.DatabaseReference);
  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Iterable<_i9.DataSnapshot> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i9.DataSnapshot>[],
        returnValueForMissingStub: <_i9.DataSnapshot>[],
      ) as Iterable<_i9.DataSnapshot>);
  @override
  bool hasChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #hasChild,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i9.DataSnapshot child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeDataSnapshot_17(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeDataSnapshot_17(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i9.DataSnapshot);
}

/// A class which mocks [FirebaseStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorage extends _i1.Mock implements _i10.FirebaseStorage {
  @override
  _i8.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_20(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_20(
          this,
          Invocation.getter(#app),
        ),
      ) as _i8.FirebaseApp);
  @override
  set app(_i8.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get bucket => (super.noSuchMethod(
        Invocation.getter(#bucket),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set bucket(String? _bucket) => super.noSuchMethod(
        Invocation.setter(
          #bucket,
          _bucket,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Duration get maxOperationRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxOperationRetryTime),
        returnValue: _FakeDuration_21(
          this,
          Invocation.getter(#maxOperationRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_21(
          this,
          Invocation.getter(#maxOperationRetryTime),
        ),
      ) as Duration);
  @override
  Duration get maxUploadRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxUploadRetryTime),
        returnValue: _FakeDuration_21(
          this,
          Invocation.getter(#maxUploadRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_21(
          this,
          Invocation.getter(#maxUploadRetryTime),
        ),
      ) as Duration);
  @override
  Duration get maxDownloadRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxDownloadRetryTime),
        returnValue: _FakeDuration_21(
          this,
          Invocation.getter(#maxDownloadRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_21(
          this,
          Invocation.getter(#maxDownloadRetryTime),
        ),
      ) as Duration);
  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);
  @override
  _i10.Reference ref([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #ref,
          [path],
        ),
        returnValue: _FakeReference_22(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeReference_22(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
      ) as _i10.Reference);
  @override
  _i10.Reference refFromURL(String? url) => (super.noSuchMethod(
        Invocation.method(
          #refFromURL,
          [url],
        ),
        returnValue: _FakeReference_22(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
        returnValueForMissingStub: _FakeReference_22(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
      ) as _i10.Reference);
  @override
  void setMaxOperationRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxOperationRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setMaxUploadRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxUploadRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setMaxDownloadRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxDownloadRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<void> useEmulator({
    required String? host,
    required int? port,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useEmulator,
          [],
          {
            #host: host,
            #port: port,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> useStorageEmulator(
    String? host,
    int? port,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #useStorageEmulator,
          [
            host,
            port,
          ],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [Reference].
///
/// See the documentation for Mockito's code generation for more information.
class MockReference extends _i1.Mock implements _i10.Reference {
  @override
  _i10.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_23(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_23(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i10.FirebaseStorage);
  @override
  String get bucket => (super.noSuchMethod(
        Invocation.getter(#bucket),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get fullPath => (super.noSuchMethod(
        Invocation.getter(#fullPath),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i10.Reference get root => (super.noSuchMethod(
        Invocation.getter(#root),
        returnValue: _FakeReference_22(
          this,
          Invocation.getter(#root),
        ),
        returnValueForMissingStub: _FakeReference_22(
          this,
          Invocation.getter(#root),
        ),
      ) as _i10.Reference);
  @override
  _i10.Reference child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeReference_22(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeReference_22(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i10.Reference);
  @override
  _i12.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<String> getDownloadURL() => (super.noSuchMethod(
        Invocation.method(
          #getDownloadURL,
          [],
        ),
        returnValue: _i12.Future<String>.value(''),
        returnValueForMissingStub: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  _i12.Future<_i10.FullMetadata> getMetadata() => (super.noSuchMethod(
        Invocation.method(
          #getMetadata,
          [],
        ),
        returnValue: _i12.Future<_i10.FullMetadata>.value(_FakeFullMetadata_24(
          this,
          Invocation.method(
            #getMetadata,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i10.FullMetadata>.value(_FakeFullMetadata_24(
          this,
          Invocation.method(
            #getMetadata,
            [],
          ),
        )),
      ) as _i12.Future<_i10.FullMetadata>);
  @override
  _i12.Future<_i10.ListResult> list([_i10.ListOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [options],
        ),
        returnValue: _i12.Future<_i10.ListResult>.value(_FakeListResult_25(
          this,
          Invocation.method(
            #list,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i10.ListResult>.value(_FakeListResult_25(
          this,
          Invocation.method(
            #list,
            [options],
          ),
        )),
      ) as _i12.Future<_i10.ListResult>);
  @override
  _i12.Future<_i10.ListResult> listAll() => (super.noSuchMethod(
        Invocation.method(
          #listAll,
          [],
        ),
        returnValue: _i12.Future<_i10.ListResult>.value(_FakeListResult_25(
          this,
          Invocation.method(
            #listAll,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i10.ListResult>.value(_FakeListResult_25(
          this,
          Invocation.method(
            #listAll,
            [],
          ),
        )),
      ) as _i12.Future<_i10.ListResult>);
  @override
  _i12.Future<_i14.Uint8List?> getData([int? maxSize = 10485760]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getData,
          [maxSize],
        ),
        returnValue: _i12.Future<_i14.Uint8List?>.value(),
        returnValueForMissingStub: _i12.Future<_i14.Uint8List?>.value(),
      ) as _i12.Future<_i14.Uint8List?>);
  @override
  _i10.UploadTask putData(
    _i14.Uint8List? data, [
    _i10.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putData,
          [
            data,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_26(
          this,
          Invocation.method(
            #putData,
            [
              data,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_26(
          this,
          Invocation.method(
            #putData,
            [
              data,
              metadata,
            ],
          ),
        ),
      ) as _i10.UploadTask);
  @override
  _i10.UploadTask putBlob(
    dynamic blob, [
    _i10.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putBlob,
          [
            blob,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_26(
          this,
          Invocation.method(
            #putBlob,
            [
              blob,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_26(
          this,
          Invocation.method(
            #putBlob,
            [
              blob,
              metadata,
            ],
          ),
        ),
      ) as _i10.UploadTask);
  @override
  _i10.UploadTask putFile(
    _i2.File? file, [
    _i10.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putFile,
          [
            file,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_26(
          this,
          Invocation.method(
            #putFile,
            [
              file,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_26(
          this,
          Invocation.method(
            #putFile,
            [
              file,
              metadata,
            ],
          ),
        ),
      ) as _i10.UploadTask);
  @override
  _i10.UploadTask putString(
    String? data, {
    _i10.PutStringFormat? format = _i10.PutStringFormat.raw,
    _i10.SettableMetadata? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putString,
          [data],
          {
            #format: format,
            #metadata: metadata,
          },
        ),
        returnValue: _FakeUploadTask_26(
          this,
          Invocation.method(
            #putString,
            [data],
            {
              #format: format,
              #metadata: metadata,
            },
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_26(
          this,
          Invocation.method(
            #putString,
            [data],
            {
              #format: format,
              #metadata: metadata,
            },
          ),
        ),
      ) as _i10.UploadTask);
  @override
  _i12.Future<_i10.FullMetadata> updateMetadata(
          _i10.SettableMetadata? metadata) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMetadata,
          [metadata],
        ),
        returnValue: _i12.Future<_i10.FullMetadata>.value(_FakeFullMetadata_24(
          this,
          Invocation.method(
            #updateMetadata,
            [metadata],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i10.FullMetadata>.value(_FakeFullMetadata_24(
          this,
          Invocation.method(
            #updateMetadata,
            [metadata],
          ),
        )),
      ) as _i12.Future<_i10.FullMetadata>);
  @override
  _i10.DownloadTask writeToFile(_i2.File? file) => (super.noSuchMethod(
        Invocation.method(
          #writeToFile,
          [file],
        ),
        returnValue: _FakeDownloadTask_27(
          this,
          Invocation.method(
            #writeToFile,
            [file],
          ),
        ),
        returnValueForMissingStub: _FakeDownloadTask_27(
          this,
          Invocation.method(
            #writeToFile,
            [file],
          ),
        ),
      ) as _i10.DownloadTask);
}

/// A class which mocks [TaskSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskSnapshot extends _i1.Mock implements _i10.TaskSnapshot {
  @override
  _i10.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_23(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_23(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i10.FirebaseStorage);
  @override
  int get bytesTransferred => (super.noSuchMethod(
        Invocation.getter(#bytesTransferred),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i10.Reference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeReference_22(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeReference_22(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i10.Reference);
  @override
  _i10.TaskState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i10.TaskState.paused,
        returnValueForMissingStub: _i10.TaskState.paused,
      ) as _i10.TaskState);
  @override
  int get totalBytes => (super.noSuchMethod(
        Invocation.getter(#totalBytes),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i11.ImagePicker {
  @override
  _i12.Future<_i11.PickedFile?> getImage({
    required _i11.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i11.CameraDevice? preferredCameraDevice = _i11.CameraDevice.rear,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
          },
        ),
        returnValue: _i12.Future<_i11.PickedFile?>.value(),
        returnValueForMissingStub: _i12.Future<_i11.PickedFile?>.value(),
      ) as _i12.Future<_i11.PickedFile?>);
  @override
  _i12.Future<List<_i11.PickedFile>?> getMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
          },
        ),
        returnValue: _i12.Future<List<_i11.PickedFile>?>.value(),
        returnValueForMissingStub: _i12.Future<List<_i11.PickedFile>?>.value(),
      ) as _i12.Future<List<_i11.PickedFile>?>);
  @override
  _i12.Future<_i11.PickedFile?> getVideo({
    required _i11.ImageSource? source,
    _i11.CameraDevice? preferredCameraDevice = _i11.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i12.Future<_i11.PickedFile?>.value(),
        returnValueForMissingStub: _i12.Future<_i11.PickedFile?>.value(),
      ) as _i12.Future<_i11.PickedFile?>);
  @override
  _i12.Future<_i11.LostData> getLostData() => (super.noSuchMethod(
        Invocation.method(
          #getLostData,
          [],
        ),
        returnValue: _i12.Future<_i11.LostData>.value(_FakeLostData_28(
          this,
          Invocation.method(
            #getLostData,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i11.LostData>.value(_FakeLostData_28(
          this,
          Invocation.method(
            #getLostData,
            [],
          ),
        )),
      ) as _i12.Future<_i11.LostData>);
  @override
  _i12.Future<_i11.XFile?> pickImage({
    required _i11.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i11.CameraDevice? preferredCameraDevice = _i11.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i12.Future<_i11.XFile?>.value(),
        returnValueForMissingStub: _i12.Future<_i11.XFile?>.value(),
      ) as _i12.Future<_i11.XFile?>);
  @override
  _i12.Future<List<_i11.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i12.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
        returnValueForMissingStub:
            _i12.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
      ) as _i12.Future<List<_i11.XFile>>);
  @override
  _i12.Future<_i11.XFile?> pickVideo({
    required _i11.ImageSource? source,
    _i11.CameraDevice? preferredCameraDevice = _i11.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i12.Future<_i11.XFile?>.value(),
        returnValueForMissingStub: _i12.Future<_i11.XFile?>.value(),
      ) as _i12.Future<_i11.XFile?>);
  @override
  _i12.Future<_i11.LostDataResponse> retrieveLostData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveLostData,
          [],
        ),
        returnValue:
            _i12.Future<_i11.LostDataResponse>.value(_FakeLostDataResponse_29(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i11.LostDataResponse>.value(_FakeLostDataResponse_29(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
      ) as _i12.Future<_i11.LostDataResponse>);
}

/// A class which mocks [ImageCropper].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageCropper extends _i1.Mock implements _i21.ImageCropper {
  @override
  _i12.Future<_i22.CroppedFile?> cropImage({
    required String? sourcePath,
    int? maxWidth,
    int? maxHeight,
    _i22.CropAspectRatio? aspectRatio,
    List<_i22.CropAspectRatioPreset>? aspectRatioPresets = const [
      _i22.CropAspectRatioPreset.original,
      _i22.CropAspectRatioPreset.square,
      _i22.CropAspectRatioPreset.ratio3x2,
      _i22.CropAspectRatioPreset.ratio4x3,
      _i22.CropAspectRatioPreset.ratio16x9,
    ],
    _i22.CropStyle? cropStyle = _i22.CropStyle.rectangle,
    _i22.ImageCompressFormat? compressFormat = _i22.ImageCompressFormat.jpg,
    int? compressQuality = 90,
    List<_i22.PlatformUiSettings>? uiSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cropImage,
          [],
          {
            #sourcePath: sourcePath,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #aspectRatio: aspectRatio,
            #aspectRatioPresets: aspectRatioPresets,
            #cropStyle: cropStyle,
            #compressFormat: compressFormat,
            #compressQuality: compressQuality,
            #uiSettings: uiSettings,
          },
        ),
        returnValue: _i12.Future<_i22.CroppedFile?>.value(),
        returnValueForMissingStub: _i12.Future<_i22.CroppedFile?>.value(),
      ) as _i12.Future<_i22.CroppedFile?>);
  @override
  _i12.Future<_i22.CroppedFile?> recoverImage() => (super.noSuchMethod(
        Invocation.method(
          #recoverImage,
          [],
        ),
        returnValue: _i12.Future<_i22.CroppedFile?>.value(),
        returnValueForMissingStub: _i12.Future<_i22.CroppedFile?>.value(),
      ) as _i12.Future<_i22.CroppedFile?>);
}

/// A class which mocks [Permission].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockPermission extends _i1.Mock implements _i23.Permission {
  @override
  int get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}
